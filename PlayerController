using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class playerControl : MonoBehaviour
{

    [SerializeField] float speed = 5f;
    [SerializeField] float jumpForce = 5f;
    bool isGrounded = false;
    Rigidbody2D rb;
    [SerializeField] LayerMask groundLayer;
    SpriteRenderer sprite;
    Animator anim;
    Vector2 savePoint; 
    [SerializeField] float RespawnHeight; 
    [SerializeField] GameObject prefab; 
    GameObject building_prefab; 
    int steps = 0;
    [SerializeField] GameObject steps_panel; 


    [SerializeField] GameObject steps_panel2; 
    [SerializeField] GameObject prefab2; 
    int steps2 = 0; 


    public void Build_Click()
    {
        steps--;// 
        foreach (Transform child in steps_panel.transform)
        {

            if (child.gameObject.activeInHierarchy) 
            {
                child.gameObject.SetActive(false);

                building_prefab = Instantiate(prefab); 
                return;
            }

        }
    }

    public void Build_Click2()
    {
        steps2--;
        foreach (Transform child in steps_panel2.transform)
        {

            if (child.gameObject.activeInHierarchy) 
            {
                child.gameObject.SetActive(false);

                building_prefab = Instantiate(prefab2); 
                return;
            }

        }
    }
    [SerializeField] GameObject Magnet;
    void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.tag == "Magnet") 
        {
            Magnet.SetActive(true);
            Destroy(collision.gameObject); 
        }
        if (collision.tag == "checkpoint") 
        {
            savePoint = collision.transform.position; 
            collision.GetComponent<Animator>().SetBool("Active", true);
        }
        if (collision.tag == "block") 
        {
            steps++; 
            Destroy(collision.gameObject);
            foreach (Transform child in steps_panel.transform) 
            {

                if (!child.gameObject.activeInHierarchy) 
                {
                    child.gameObject.SetActive(true);
                    return;
                }

            }
        }
        if (collision.tag == "box") 
        {
            steps2++; 
            Destroy(collision.gameObject); 
            foreach (Transform child in steps_panel2.transform) 
            {

                if (!child.gameObject.activeInHierarchy) 
                {
                    child.gameObject.SetActive(true);
                    return;
                }

            }
        }
    }

    // Start is called before the first frame update
    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        sprite = GetComponent<SpriteRenderer>();
        anim = GetComponent<Animator>();
        savePoint = transform.position;// ���������� ������� ���������� � ���������� ��������
    }

    // Update is called once per frame
    void Update()
    {
        if (Input.GetKeyDown(KeyCode.F))
        {
            Magnet.SetActive(!Magnet.activeInHierarchy);
        }
        if (building_prefab)// ���� ���������� building_prefab �������� � ���� ������
        {

            Vector2 mousePosition = Camera.main.ScreenToWorldPoint(Input.mousePosition); // ��������� ���������� �����
            building_prefab.transform.position = new Vector3(mousePosition.x, mousePosition.y, transform.position.z);// ����������� ������ � ���������� �����
            if (Input.GetMouseButtonDown(0)) // ���� ������ ����� ������� ����
            {
                building_prefab.GetComponent<Collider2D>().enabled = true;// �������� ��������� �� �������
                building_prefab = null; // �������� �������� ����������� �������, ����� ���� ��� ����� �� �������

            }
        }


        if (transform.position.y < RespawnHeight)// ���� ������ ������ ���� ������ ���������
        {
            transform.position = savePoint;// ������ ��������� ������ �� ���������� ��������
        }

        float horizontalInput = Input.GetAxis("Horizontal");

        if (horizontalInput > 0)
        {
            sprite.flipX = false;
        }
        if (horizontalInput < 0)
        {
            sprite.flipX = true;
        }

        if (horizontalInput != 0)
        {
            anim.SetBool("Run", true);
        }
        else
        {
            anim.SetBool("Run", false);
        }
        anim.SetFloat("Y", rb.velocity.y);
        if (isGrounded)
            anim.SetFloat("Y", 0);

        if (Input.GetKey(KeyCode.S))
            anim.SetBool("Crouch", true);
        else
            anim.SetBool("Crouch", false);
        // �������� ���������
        rb.velocity = new Vector2(horizontalInput * speed, rb.velocity.y);

        //��������� ��������� � ��������� ���������� ��� �������� �������������
        Collider2D col = GetComponent<Collider2D>();
        //������ ������� ���� ��� ������ ���������
        isGrounded = Physics2D.OverlapCircle(transform.position - transform.up * ((col.bounds.extents.y / transform.localScale.y - col.offset.y) * transform.localScale.y), 0.01f, groundLayer);

        if (Input.GetKeyDown(KeyCode.Space) && isGrounded)
        {
            rb.velocity = new Vector2(rb.velocity.x, jumpForce);
        }
    }
}
